// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: comments.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createComment = `-- name: CreateComment :one
Insert Into comments(
    user_id,
    ticket_id,
    comments,
    customer_visible
)Values(
    $1,$2,$3,$4
)
Returning id, user_id, ticket_id, comments, customer_visible, created_at, updated_at
`

type CreateCommentParams struct {
	UserID          uuid.UUID `json:"user_id"`
	TicketID        int64     `json:"ticket_id"`
	Comments        string    `json:"comments"`
	CustomerVisible bool      `json:"customer_visible"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRow(ctx, createComment,
		arg.UserID,
		arg.TicketID,
		arg.Comments,
		arg.CustomerVisible,
	)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TicketID,
		&i.Comments,
		&i.CustomerVisible,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getComment = `-- name: GetComment :one
Select id, user_id, ticket_id, comments, customer_visible, created_at, updated_at From comments
Where id = $1
Limit 1
`

func (q *Queries) GetComment(ctx context.Context, id int64) (Comment, error) {
	row := q.db.QueryRow(ctx, getComment, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TicketID,
		&i.Comments,
		&i.CustomerVisible,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTicketComments = `-- name: GetTicketComments :many
Select id, user_id, ticket_id, comments, customer_visible, created_at, updated_at From comments
Where ticket_id = $1
Limit $2
Offset $3
`

type GetTicketCommentsParams struct {
	TicketID int64 `json:"ticket_id"`
	Limit    int32 `json:"limit"`
	Offset   int32 `json:"offset"`
}

func (q *Queries) GetTicketComments(ctx context.Context, arg GetTicketCommentsParams) ([]Comment, error) {
	rows, err := q.db.Query(ctx, getTicketComments, arg.TicketID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Comment{}
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TicketID,
			&i.Comments,
			&i.CustomerVisible,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateComment = `-- name: UpdateComment :one
Update comments
Set
    comments = $2,
    customer_visible = $3,
    updated_at = NOW()
Where id = $1
Returning id, user_id, ticket_id, comments, customer_visible, created_at, updated_at
`

type UpdateCommentParams struct {
	ID              int64  `json:"id"`
	Comments        string `json:"comments"`
	CustomerVisible bool   `json:"customer_visible"`
}

func (q *Queries) UpdateComment(ctx context.Context, arg UpdateCommentParams) (Comment, error) {
	row := q.db.QueryRow(ctx, updateComment, arg.ID, arg.Comments, arg.CustomerVisible)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TicketID,
		&i.Comments,
		&i.CustomerVisible,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
