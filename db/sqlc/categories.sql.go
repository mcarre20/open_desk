// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: categories.sql

package db

import (
	"context"
)

const createCategory = `-- name: CreateCategory :one
Insert Into caterogies(
    category
)Values(
    $1
)
Returning id, category, created_at
`

func (q *Queries) CreateCategory(ctx context.Context, category string) (Caterogy, error) {
	row := q.db.QueryRow(ctx, createCategory, category)
	var i Caterogy
	err := row.Scan(&i.ID, &i.Category, &i.CreatedAt)
	return i, err
}

const getAllCategories = `-- name: GetAllCategories :many
Select id, category, created_at From caterogies
`

func (q *Queries) GetAllCategories(ctx context.Context) ([]Caterogy, error) {
	rows, err := q.db.Query(ctx, getAllCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Caterogy{}
	for rows.Next() {
		var i Caterogy
		if err := rows.Scan(&i.ID, &i.Category, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :one
Update caterogies
Set
    category = $2
Where id = $1
Returning id, category, created_at
`

type UpdateCategoryParams struct {
	ID       int16  `json:"id"`
	Category string `json:"category"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Caterogy, error) {
	row := q.db.QueryRow(ctx, updateCategory, arg.ID, arg.Category)
	var i Caterogy
	err := row.Scan(&i.ID, &i.Category, &i.CreatedAt)
	return i, err
}
